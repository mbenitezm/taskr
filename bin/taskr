#!/usr/bin/env python 

import argparse, subprocess, os, sys
from lib.taskr.Taskr import Taskr
from lib.taskr.Exceptions import *

sys.dont_write_bytecode = True

def update():
  try:
    os.chdir('/usr/local/taskr')
    cmd = ["git"]
    args = [
        "pull"
        # , "github", "master"
        ]
    git = subprocess.Popen(cmd+args,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    gout = git.stdout.read().rstrip()
    if len(gout) > 0:
      print gout
  except Exception as e:
    print e
    return "-"
if __name__ == "__main__":

  parser = argparse.ArgumentParser(description='Taskr helps you keep track of time!')
  parser.add_argument("-n", metavar="'write some code'", help='Task name')
  parser.add_argument("-e", metavar="estimated hours", type=float, help='Estimated time in hours')
  parser.add_argument("-t", metavar="tag", type=str, help='Tag')
  parser.add_argument("-i", metavar="", nargs="?", const=True, help='Pause current task')
  parser.add_argument("-p", metavar="", nargs="?", const=True, dest="i", help='Pause current task')
  parser.add_argument("-r", metavar="", nargs="?", const=True, help='Resume current task')
  parser.add_argument("-o", metavar="", nargs="+", help='Open closed task')
  parser.add_argument("-c", metavar="", nargs="?", const=True, help='Close current task')
  parser.add_argument("-cr", metavar="", nargs="?", const=True, help='Close current task and resume previous paused one')
  parser.add_argument("-d", metavar="", nargs="?", const=True, help='Close current task')
  parser.add_argument("-s", metavar="", nargs="?", const=True, help='Show taskr status')
  parser.add_argument("--all", metavar="", nargs="?", const=True, help='Show all taskr status')
  parser.add_argument("--info", metavar="", nargs="?", const=False, help='Show detailed info')
  parser.add_argument("--tag", metavar="", nargs="?", const=False, help='Show report by tag')
  parser.add_argument("--update", metavar="", nargs="?", const=True, help='Update taskr')
  parser.add_argument("--weeklog", metavar="", nargs="?", const=False, help='Show weeklog')
  args = parser.parse_args()

  taskr = Taskr()
  if args.i is not None:
    try:
      taskr.pauseCurrentTask()
    except TaskNotFoundException as nte:
      print colored("No active task","red")
      taskr.printTasks()
  elif args.info is not None:
    taskr.taskInfo(args.info)
  elif args.weeklog is not None:
    taskr.printWeeklog()
  elif args.d is not None:
    taskr.deleteTask(args.d)
    taskr.printTasks()
  elif args.c is not None:
    try:
      taskr.closeCurrentTask()
    except TaskNotFoundException as nte:
      print colored("No active task","red")
      taskr.printTasks()
  elif args.o is not None:
    taskr.openTask(args.o[0])
  elif args.r is not None:
    taskr.resumeCurrentTask(args.r)
  elif args.cr is not None:
    try:
      taskr.closeCurrentTask()
    except TaskNotFoundException as nte:
      print colored("No active task","red")
      taskr.printTasks()
    taskr.resumeCurrentTask(args.cr)
  elif args.s is not None:
    taskr.printTasks()
  elif args.all is not None:
    taskr.printTasks(True)
  elif args.n is not None:
    taskr.newTask(args.n,args.e,args.t)
  elif args.update is not None:
    update()
  else:
    taskr.printTasks()

  taskr.saveTasks()
