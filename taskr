#!/usr/bin/env python 

#
# name: "Tarea 1"
# id: 1
# status: 1 | 2 | 0      -> 1 active, 2 paused, 0 closed
# worklog:
#   -
#     started_at: 1383167335
#     duration: 3
#   -
#     started_at: 1383181735
#     duration: 1

import yaml, sys, logging, time, datetime, argparse
from termcolor import colored
from prettytable import PrettyTable
from os.path import expanduser

class Taskr():

  taskslog_name = "task_log"
  errorlog = "error.log"
  taskr_path = ".taskr/"
  readableStatus = {
      0:colored("Closed","cyan"),
      1:colored("Active","green"),
      2:colored("Paused","yellow",None,["blink"])}
  
  def __init__(self):
    home = expanduser("~") + "/"
    self.root = home + self.taskr_path
    logging.basicConfig(filename=self.root + self.errorlog, level=logging.DEBUG)
    self.taskslog_path = self.root + self.taskslog_name
    try:
      self.log = open(self.taskslog_path,"r+")
    except IOError as ioe:
      self.log = open(self.taskslog_path,"w+")
    except Exception as e:
      print "Unexpected error ocurred"
      logging.error(e)
      sys.exit(1)

    self.__loadtasks()
    self.log.close()
    
  def __loadtasks(self):
    try:
      self.tasks = yaml.load(self.log) or []
    except Exception as e:
      print "Error loading tasks"
      logging.error(e)
      sys.exit(1)

  def saveTasks(self):
    try:
      self.log = open(self.taskslog_path,"w+")
      self.log.write(yaml.dump(self.tasks))
      self.log.close()
    except IOError as ioe:
      print "Error while saving"
      logging.error(e)
      sys.exit(1)

  def __datefmt(self,time):
    return datetime.datetime.fromtimestamp(time).strftime('%Y-%m-%d %H:%M:%S')

  def printTasks(self):
    if len(self.tasks) > 0:
      print "Your current task log:"
      output = PrettyTable(["ID","Task","WorkSessions","Last Worked On","Status"])
      output.align["Task"]
      for task in self.tasks:
        output.add_row([task["id"],task["name"],len(task["worklog"]), self.__datefmt(max(task["worklog"], key=task["worklog"].get)), self.readableStatus[task["status"]]])
      print output.get_string(border=False)
    else:
      print "You currently don't have any registered tasks"

  def closeCurrentTask(self):
    try:
      if self.tasks[-1]["status"] == 1:
        last_task = self.tasks[-1]
        last_task["status"] = 0
        self.__stopCurrentSession(last_task)
      else:
        raise NoTaskException("")
    except NoTaskException as nte:
      raise NoTaskException("")
    except Exception as e:
      print e

  def pauseCurrentTask(self):
    try:
      if self.tasks[-1]["status"] == 1:
        last_task = self.tasks[-1]
        last_task["status"] = 2
        self.__stopCurrentSession(last_task)
      else:
        raise Exception("")
    except:
      print colored("No active task","red")
      self.printTasks()

  def __findtask(self,tid):
    return [element for element in self.tasks if element['id'] == tid]


  def resumeCurrentTask(self,task_id=True):
    try:
      last_task = self.__findtask(int(task_id))[-1] if task_id != True else self.tasks[-1]
      if last_task["status"] == 0:
        raise Exception("")
      else:
        last_task["status"] = 1
        self.__stopCurrentSession(last_task)
        last_task["worklog"][int(time.time())] = {"duration":0}
    except Exception as e:
      print colored("No paused task","cyan")
      self.printTasks()

  def __stopCurrentSession(self,last_task):
    last_session_time = max(last_task["worklog"],key=last_task["worklog"].get)
    last_session = last_task["worklog"][last_session_time]
    last_session["duration"] = (time.time() - last_session_time) / 3600

  def newTask(self, name=None, estimated=None):
    name = colored("Untitled","red") if name == None else name
    estimated = 0.0 if estimated == None else estimated
    try:
      self.closeCurrentTask()
    except NoTaskException as nte:
      pass
    self.tasks.append(
        {
          "name" : name,
          "id" : int(time.time()) - 1383100000,
          "estimated" : estimated,
          "status" : 1,
          "worklog" : {int(time.time()):{"duration":0}}
          }
        )

class NoTaskException(Exception):

  def __init__(self, message):
    Exception.__init__(self, message)

if __name__ == "__main__":

  parser = argparse.ArgumentParser(description='Taskr helps you keep track of time!')
  parser.add_argument("-n", metavar="'write some code'", help='Task name')
  parser.add_argument("-e", metavar="estimated hours", type=float, help='Estimated time in hours')
  parser.add_argument("-i", metavar="", nargs="?", const=True, help='Pause current task')
  parser.add_argument("-p", metavar="", nargs="?", const=True, dest="i", help='Pause current task')
  parser.add_argument("-r", metavar="", nargs="?", const=True, help='Resume current task')
  parser.add_argument("-c", metavar="", nargs="?", const=True, help='Close current task')
  parser.add_argument("-s", metavar="", nargs="?", const=True, help='Show taskr status')
  args = parser.parse_args()

  taskr = Taskr()
  if args.i is not None:
    taskr.pauseCurrentTask()
  elif args.r is not None:
    taskr.resumeCurrentTask(args.r)
  elif args.c is not None:
    try:
      taskr.closeCurrentTask()
    except NoTaskException as nte:
      print colored("No active task","red")
      taskr.printTasks()
  elif args.s is not None:
    taskr.printTasks()
  else:
    taskr.newTask(args.n,args.e)

  taskr.saveTasks()
